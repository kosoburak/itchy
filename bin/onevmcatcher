#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# add local dirs to load path if necessary
lib = File.expand_path(File.join('..', '..', 'lib'), __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'rubygems'
require 'thor'
require 'onevmcatcher'
require 'openssl'

#
class OnevmcatcherRunnable < Thor
  include Thor::Actions

  DEFAULT_METADATA_DIR   = '/var/spool/onevmcatcher'
  DEFAULT_CA_PATH        = '/etc/grid-security/certificates'
  DEFAULT_CA_FILE        = nil
  DEFAULT_TIMEOUT        = 1800
  DEFAULT_CONN_TIMEOUT   = 15

  AVAILABLE_DATASTORES   = Onevmcatcher::Helpers::DatastoreConnectorsHelper.datastores.freeze
  AVAILABLE_LOG_DEVS     = ['stdout', 'stderr'].freeze
  AVAILABLE_LOG_LEVELS   = ['debug', 'info', 'warn', 'error', 'fatal', 'unknown'].freeze
  AVAILABLE_AUTH_METHODS = ['none', 'basic'].freeze

  #
  def self.source_root
    File.expand_path(File.join('..', '..', 'templates'), __FILE__)
  end

  desc 'archive', 'Handle an incoming vmcatcher event and store it for further processing'
  method_option :metadata_dir, :type => :string, :default => DEFAULT_METADATA_DIR,
                :aliases => '-m', :desc => 'Path to a metadata directory for storing events, must be writable'
  method_option :log_to, :enum => AVAILABLE_LOG_DEVS, :default => 'stderr',
                :aliases => '-l', :desc => 'Device for logging output'
  method_option :log_level, :enum => AVAILABLE_LOG_LEVELS,
                :default => 'error', :aliases => '-b', :desc => 'Logging level'
  method_option :debug, :type => :boolean, :default => false, :aliases => '-d', :desc => 'Enable debugging'
  def archive
    # prep
    opts = normalize_options
    logger = init_logger(opts)

    Onevmcatcher::MetadataArchiver.new(
      vmcatcher_event,
      vmcatcher_config,
      opts
    ).archive!
  end

  desc 'sync', 'Sync archived vmcatcher events and upload images into the datastore'
  method_option :datastore, :enum => AVAILABLE_DATASTORES, :required => true,
                :aliases => '-o', :desc => 'Path to a metadata directory for storing events, must be writable'
  method_option :endpoint, :type => :string, :required => true,
                :aliases => '-e', :desc => 'Datastore endpoint URI or URL'
  method_option :metadata_dir, :type => :string, :default => DEFAULT_METADATA_DIR,
                :aliases => '-m', :desc => 'Path to a metadata directory for storing events, must be writable'
  method_option :auth, :enum => AVAILABLE_AUTH_METHODS, :default => AVAILABLE_AUTH_METHODS.first,
                :aliases => '-a', :desc => 'Datastore authentication method'
  method_option :timeout, :type => :numeric, :default => DEFAULT_TIMEOUT,
                :aliases => '-t', :desc => 'Default timeout for execution in seconds'
  method_option :connection_timeout, :type => :numeric, :default => DEFAULT_CONN_TIMEOUT,
                :aliases => '-c', :desc => 'Default timeout for open connections in seconds'
  method_option :username, :type => :string, :default => nil,
                :aliases => '-u', :desc => 'Username for basic authentication'
  method_option :password, :type => :string, :default => nil,
                :aliases => '-p', :desc => 'Password for basic authentication'
  method_option :ca_path, :type => :string, :default => DEFAULT_CA_PATH,
                :aliases => '-b', :desc => 'Path to CA certificates directory'
  method_option :ca_file, :type => :string, :default => DEFAULT_CA_FILE,
                :aliases => '-f', :desc => 'Path to CA certificates in a file'
  method_option :log_to, :enum => AVAILABLE_LOG_DEVS, :default => 'stderr',
                :aliases => '-l', :desc => 'Device for logging output'
  method_option :log_level, :enum => AVAILABLE_LOG_LEVELS,
                :default => 'error', :aliases => '-b', :desc => 'Logging level'
  method_option :debug, :type => :boolean, :default => false, :aliases => '-d', :desc => 'Enable debugging'
  method_option :skip_ca_check, :type => :boolean, :default => false,
                :aliases => '-s', :desc => 'Skip server certificate verification'
  def sync
    # TODO: do something
  end

  private

  #
  def normalize_options
    opts = ::Hashie::Mash.new(options)

    opts.log_to = (options[:log_to] == 'stdout') ? STDOUT : STDERR
    opts.log_level = Onevmcatcher::Log.const_get(options[:log_level].upcase)
    opts.log_level = Onevmcatcher::Log::DEBUG if options[:debug]
    opts.endpoint = URI(options[:endpoint]).to_s
    opts.datastore = datastore(options[:datastore])

    if options[:skip_ca_check]
      silence_warnings { ::OpenSSL::SSL.const_set(:VERIFY_PEER, ::OpenSSL::SSL::VERIFY_NONE) }
    end

    opts
  end

  #
  def init_logger(opts)
    logger = Onevmcatcher::Log.new(opts.log_to)
    logger.level = opts.log_level
    logger
  end

  #
  def vmcatcher_config
    Onevmcatcher::VmcatcherConfiguration.new(ENV)
  end

  #
  def vmcatcher_event
    Onevmcatcher::VmcatcherEvent.new(ENV)
  end

  def datastore(datastore_name)
    Onevmcatcher::DatastoreConnectors.const_get("#{datastore_name.capitalize}DatastoreConnector")
  end

end

OnevmcatcherRunnable.start
