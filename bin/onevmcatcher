#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# add local dirs to load path if necessary
lib = File.expand_path(File.join('..', '..', 'lib'), __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'rubygems'
require 'thor'
require 'onevmcatcher'
require 'openssl'

# Executable wrapper around onevmcatcher's libraries.
# Parses and validates user input and triggers internal
# logic.
class OnevmcatcherRunnable < Thor
  include Thor::Actions

  AVAILABLE_DATASTORES   = Onevmcatcher::Helpers::DatastoreConnectorsHelper.datastores.freeze
  AVAILABLE_LOG_LEVELS   = ['debug', 'info', 'warn', 'error', 'fatal', 'unknown'].freeze
  AVAILABLE_AUTH_METHODS = ['none', 'basic'].freeze

  # Static method required by Thor to make certain
  # actions work.
  def self.source_root
    File.expand_path(File.join('..', '..', 'templates'), __FILE__)
  end

  desc 'archive', 'Handle an incoming vmcatcher event and store it for further processing'
  method_option :metadata_dir, :type => :string, :default => Onevmcatcher::Settings.metadata_dir,
                :aliases => '-m', :desc => 'Path to a metadata directory for storing events, must be writable'
  method_option :log_to, :type => :string, :default => Onevmcatcher::Settings.log_to,
                :aliases => '-l', :desc => 'Logging output, file path or stderr/stdout'
  method_option :log_level, :enum => AVAILABLE_LOG_LEVELS, :default => Onevmcatcher::Settings.log_level,
                :aliases => '-b', :desc => 'Logging level'
  method_option :debug, :type => :boolean, :default => Onevmcatcher::Settings.debug,
                :aliases => '-d', :desc => 'Enable debugging'
  def archive
    check_restrictions
    opts = normalize_options
    logger = init_logger(opts)

    Onevmcatcher::Log.info "[#{self.class.name}] Archiver started"
    Onevmcatcher::Log.debug "[#{self.class.name}] With options: #{opts.inspect}"

    Onevmcatcher::MetadataArchiver.new(
      Onevmcatcher::VmcatcherConfiguration.new(ENV),
      opts
    ).archive!(Onevmcatcher::VmcatcherEvent.new(ENV))
  end

  desc 'sync', 'Sync archived vmcatcher events and upload images into the datastore'
  method_option :datastore, :enum => AVAILABLE_DATASTORES, :default => Onevmcatcher::Settings.datastore,
                :aliases => '-o', :desc => 'Path to a metadata directory for storing events, must be writable'
  method_option :input_image_formats, :type => :array, :default => Onevmcatcher::Settings.input_image_formats,
                :aliases => '-i', :desc => 'Allowed input image formats, as declared in VMCATCHER_EVENT_HV_FORMAT'
  method_option :output_image_formats, :type => :array, :default => Onevmcatcher::Settings.output_image_formats,
                :aliases => '-j', :desc => 'Allowed output image formats, for direct upload into the datastore'
  method_option :qemu_img_binary, :type => :string, :default => Onevmcatcher::Settings.qemu_img_binary,
                :aliases => '-k', :desc => 'Path to a custom qemu-img binary for image transformations'
  method_option :endpoint, :type => :string, :default => Onevmcatcher::Settings.endpoint,
                :aliases => '-e', :desc => 'Datastore endpoint URI or URL'
  method_option :metadata_dir, :type => :string, :default => Onevmcatcher::Settings.metadata_dir,
                :aliases => '-m', :desc => 'Path to a metadata directory for storing events, must be writable'
  method_option :template_dir, :type => :string, :default => Onevmcatcher::Settings.template_dir,
                :aliases => '-g', :desc => 'Path to a template directory, must be readable'
  method_option :auth, :enum => AVAILABLE_AUTH_METHODS, :default => Onevmcatcher::Settings.auth,
                :aliases => '-a', :desc => 'Datastore authentication method'
  method_option :timeout, :type => :numeric, :default => Onevmcatcher::Settings.timeout,
                :aliases => '-t', :desc => 'Default timeout for execution in seconds'
  method_option :connection_timeout, :type => :numeric, :default => Onevmcatcher::Settings.connection_timeout,
                :aliases => '-c', :desc => 'Default timeout for open connections in seconds'
  method_option :username, :type => :string, :default => Onevmcatcher::Settings.username,
                :aliases => '-u', :desc => 'Username for basic authentication'
  method_option :password, :type => :string, :default => Onevmcatcher::Settings.password,
                :aliases => '-p', :desc => 'Password for basic authentication'
  method_option :ca_path, :type => :string, :default => Onevmcatcher::Settings.ca_path,
                :aliases => '-b', :desc => 'Path to CA certificates directory'
  method_option :ca_file, :type => :string, :default => Onevmcatcher::Settings.ca_file,
                :aliases => '-f', :desc => 'Path to CA certificates in a file'
  method_option :log_to, :type => :string, :default => Onevmcatcher::Settings.log_to,
                :aliases => '-l', :desc => 'Logging output, file path or stderr/stdout'
  method_option :log_level, :enum => AVAILABLE_LOG_LEVELS, :default => Onevmcatcher::Settings.log_level,
                :aliases => '-b', :desc => 'Logging level'
  method_option :debug, :type => :boolean, :default => Onevmcatcher::Settings.debug,
                :aliases => '-d', :desc => 'Enable debugging'
  method_option :skip_ca_check, :type => :boolean, :default => Onevmcatcher::Settings.skip_ca_check,
                :aliases => '-s', :desc => 'Skip server certificate verification'
  def sync
    check_restrictions
    check_sync_restrictions
    opts = normalize_options
    logger = init_logger(opts)

    Onevmcatcher::Log.info "[#{self.class.name}] Syncmaster started"
    Onevmcatcher::Log.debug "[#{self.class.name}] With options: #{opts.inspect}"

    Onevmcatcher::ImageSyncmaster.new(
      Onevmcatcher::VmcatcherConfiguration.new(ENV),
      opts
    ).sync!
  end

  private

  # Converts Thor options into a Hashie::Mash instance
  # with some additional conversions and modifications.
  # Helps with integration later on.
  #
  # @return [Hashie::Mash] hash-like structure with options
  def normalize_options
    opts = ::Hashie::Mash.new(options)

    opts.log_to = case options[:log_to]
                  when 'stdout'
                    STDOUT
                  when 'stderr'
                    STDERR
                  else
                    options[:log_to]
                  end
    opts.log_level = Onevmcatcher::Log.const_get(options[:log_level].upcase)
    opts.log_level = Onevmcatcher::Log::DEBUG if options[:debug]

    opts.endpoint = URI(options[:endpoint]).to_s if options[:endpoint]

    if options[:datastore]
      opts.datastore = Onevmcatcher::Helpers::DatastoreConnectorsHelper.datastore_connector(options[:datastore])
    end

    if options[:skip_ca_check]
      silence_warnings { ::OpenSSL::SSL.const_set(:VERIFY_PEER, ::OpenSSL::SSL::VERIFY_NONE) }
    end

    opts
  end

  # Checks additional restrictions not enforced by thor.
  # Mostly stuff broken by using SettingsLogic with thor.
  def check_restrictions
    fail "Logging target #{options[:log_to].inspect} " \
         "is not allowed!" if options[:log_to].nil? || options[:log_to].empty?
    fail "Logging level #{options[:log_level].inspect} " \
         "is not allowed!" unless AVAILABLE_LOG_LEVELS.include?(options[:log_level])
  end

  def check_sync_restrictions
    fail "Datastore #{options[:datastore].inspect} " \
         "is not allowed!" unless AVAILABLE_DATASTORES.include?(options[:datastore])
    fail "Authentication #{options[:auth].inspect} " \
         "is not allowed!" unless AVAILABLE_AUTH_METHODS.include?(options[:auth])
  end

  # Initializes logging for Onevmcatcher::Log.
  #
  # @param opts [Hashie::Mash] hash-like structure with options
  # @return [Onevmcatcher::Log] logger instance
  def init_logger(opts)
    logger = Onevmcatcher::Log.new(opts.log_to)
    logger.level = opts.log_level
    logger
  end

end

OnevmcatcherRunnable.start
