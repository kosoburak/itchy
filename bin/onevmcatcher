#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# add local dirs to load path if necessary
lib = File.expand_path(File.join('..', '..', 'lib'), __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'rubygems'
require 'thor'
require 'onevmcatcher'

class OnevmcatcherRunnable < Thor
  include Thor::Actions

  def self.source_root
    File.expand_path(File.join('..', '..', 'templates'), __FILE__)
  end

  desc 'event', 'Handle an incoming vmcatcher event'
  method_option :metadata_dir, :type => :string, :default => '/var/spool/onevmcatcher',
                :aliases => '-m', :desc => 'Path to a metadata directory for storing events, must be writable'
  method_option :log_to, :enum => ['stdout', 'stderr'], :default => 'stderr',
                :aliases => '-l', :desc => 'Device for logging output'
  method_option :log_level, :enum => ['debug', 'info', 'warn', 'error', 'fatal', 'unknown'],
                :default => 'error', :aliases => '-b', :desc => 'Logging level'
  method_option :debug, :type => :boolean, :default => false, :aliases => '-d', :desc => 'Enable debugging'
  def event
    # prep
    opts = normalize_options
    logger = init_logger(opts)

    raise ArgumentError, "Metadata directory is not a directory!" unless File.directory? opts.metadata_dir
    raise ArgumentError, "Metadata directory is not writable!" unless File.writable? opts.metadata_dir
    FileUtils.mkdir_p opts.metadata_dir

    temp_file = Tempfile.new('vmcatcher_env_log')
    permanent_file_path = File.join(
      opts.metadata_dir,
      "#{ENV['VMCATCHER_EVENT_TYPE'] || 'Unknown'}_#{Time.now.to_s.gsub(/\s+/, '_')}.json"
    )

    env_log = ENV.select { |key, _| key.include? 'VMCATCHER' }

    temp_file.write JSON.pretty_generate(env_log)
    temp_file.flush

    FileUtils.cp temp_file.path, permanent_file_path
    temp_file.close

    true
  end

  private

  def normalize_options
    opts = ::Hashie::Mash.new(options)
    opts.log_to = (options[:log_to] == 'stdout') ? STDOUT : STDERR
    opts.log_level = Onevmcatcher::Log.const_get(options[:log_level].upcase)
    opts
  end

  def init_logger(options)
    logger = Onevmcatcher::Log.new(options.log_to)
    logger.level = options.log_level
    logger
  end

end

OnevmcatcherRunnable.start
